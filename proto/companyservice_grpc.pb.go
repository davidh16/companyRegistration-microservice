// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: companyservice.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompanyRegistrationClient is the client API for CompanyRegistration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyRegistrationClient interface {
	RegisterCompany(ctx context.Context, in *CompanyRegisterRequest, opts ...grpc.CallOption) (*RegisteredCompany, error)
}

type companyRegistrationClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyRegistrationClient(cc grpc.ClientConnInterface) CompanyRegistrationClient {
	return &companyRegistrationClient{cc}
}

func (c *companyRegistrationClient) RegisterCompany(ctx context.Context, in *CompanyRegisterRequest, opts ...grpc.CallOption) (*RegisteredCompany, error) {
	out := new(RegisteredCompany)
	err := c.cc.Invoke(ctx, "/main.CompanyRegistration/registerCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyRegistrationServer is the server API for CompanyRegistration service.
// All implementations must embed UnimplementedCompanyRegistrationServer
// for forward compatibility
type CompanyRegistrationServer interface {
	RegisterCompany(context.Context, *CompanyRegisterRequest) (*RegisteredCompany, error)
	mustEmbedUnimplementedCompanyRegistrationServer()
}

// UnimplementedCompanyRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyRegistrationServer struct {
}

func (UnimplementedCompanyRegistrationServer) RegisterCompany(context.Context, *CompanyRegisterRequest) (*RegisteredCompany, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCompany not implemented")
}
func (UnimplementedCompanyRegistrationServer) mustEmbedUnimplementedCompanyRegistrationServer() {}

// UnsafeCompanyRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyRegistrationServer will
// result in compilation errors.
type UnsafeCompanyRegistrationServer interface {
	mustEmbedUnimplementedCompanyRegistrationServer()
}

func RegisterCompanyRegistrationServer(s grpc.ServiceRegistrar, srv CompanyRegistrationServer) {
	s.RegisterService(&CompanyRegistration_ServiceDesc, srv)
}

func _CompanyRegistration_RegisterCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyRegistrationServer).RegisterCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.CompanyRegistration/registerCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyRegistrationServer).RegisterCompany(ctx, req.(*CompanyRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyRegistration_ServiceDesc is the grpc.ServiceDesc for CompanyRegistration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyRegistration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.CompanyRegistration",
	HandlerType: (*CompanyRegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registerCompany",
			Handler:    _CompanyRegistration_RegisterCompany_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "companyservice.proto",
}
